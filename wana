#!/bin/sh

export POSIXLY_CORRECT=yes
set +o | grep "posix" | {
    while read -r set_cmd; do
        set -o "${set_cmd##* }" 2>/dev/null
    done
}

###ERROR HANDLING###+
abort()
{
    printf "\\n" >&2
    cat >&2 << EOT
 ___________________________________________ 
|        ||                                 |
|        || <-- Program                     |
|        ||                                 |
|        ||            , ~ ~ ~  ~           |
|        ||          ,' ',  ~  ~  ~         |
|        ||        ,' ,#, ',  ~             |
|        ||      ,' ,'#' ,'                 |
|        ||    ,' ,'#' ,'                   |
|        ||     ', ´ ,'',                   |
|       /  \      ','    ',     O  <-- You  |
|      |#   |              ',---|           |
|      /    \                ',/|           |
|     '-....-'                 / \          |
|                             /   \         |
|___________________________________________|

EOT

    printf "%s: %s\\n" "$SCRIPT_NAME" "Execution of script failed..." >&2
    exit 1 # make sure we exit with exit code on abort
}
trap 'abort' 0

set -e
#set -x

SCRIPT_NAME="$( basename "$0"; echo n )" && SCRIPT_NAME=${SCRIPT_NAME%??}
EXIT_CODE_INVALID_COMMAND=1
EXIT_CODE_INVALID_LOG_FILE=2
EXIT_CODE_INVALID_FILTER=3

error_exit() {
    exit_code="$1"
    shift
    printf "%s: %s\\n" "$SCRIPT_NAME" "$@" 1>&2
    exit "$exit_code"
}

str_quote() {
    printf %s\\n "$1" | sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/"
}
###ERROR HANDLING###-

###UTILITIES###+
compare_strings() {
    if [ "$1" = "$2" ]; then
        printf "%d" "0"
        elif [ "$( printf "%s\\n%s" "$1" "$2" | sort | sed -n "1p" )" = "$1" ]; then
        printf "%d" "1"
    else
        printf "%d" "-1"
    fi
}

is_unsigned_num() {
    case "$1" in
        *[!0-9]*|'') return 1 ;; # garbage
        *)           return 0 ;; # number
    esac
}

trim() {
    awk '{ $1=$1; print }'
}
###UTILITIES###-

###ARGUMENTS PROCESSING###+
F_AFTER=""
F_BEFORE=""
F_IP=""
F_URI=""

{ # Parse arguments
    ARG_END=n
    OTHERS=""
    while [ "$#" -gt 0 ]; do
        if [ "$ARG_END" = y ]; then
            OTHERS="${OTHERS} $( str_quote "$1" )"
            shift # arg
        else
            case "$1" in
                -a) # DATETIME – after = jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data). DATETIME je formátu YYYY-MM-DD HH:MM:SS
                    F_AFTER="$2"
                    if [ -z "$F_AFTER" ]; then
                        error_exit "$EXIT_CODE_INVALID_FILTER" "Invalid date (for -a): Empty argument"
                    fi
                    shift 2 # arg + val
                ;;
                -b) # DATETIME – before, jsou uvažovány pouze záznamy PŘED tímto datem (bez tohodo data)
                    F_BEFORE="$2"
                    if [ -z "$F_BEFORE" ]; then
                        error_exit "$EXIT_CODE_INVALID_FILTER" "Invalid date (for -b): Empty argument"
                    fi
                    shift 2 # arg + val
                ;;
                -ip) # IPADDR – jsou uvažovány pouze záznamy odpovídající požadavkům ze zdrojové adresy IPADDR. Formát IPADDR odpovídá IPv4 nebo IPv6.
                    F_IP="$2"
                    if [ -z "$F_IP" ]; then
                        error_exit "$EXIT_CODE_INVALID_FILTER" "Invalid ip (for -ip): Empty argument"
                    fi
                    shift 2 # arg + val
                ;;
                -uri) # URI – jsou uvažovány pouze záznamy týkající se dotazů na konkrétní webovou stránku. URI je základní regulární výraz.
                    F_URI="$2"
                    if [ -z "$F_URI" ]; then
                        error_exit "$EXIT_CODE_INVALID_FILTER" "Invalid uri (for -uri): Empty argument"
                    fi
                    shift 2 # arg + val
                ;;
                --) # end of arguments
                    ARG_END=y
                    shift # arg
                ;;
                *)
                    OTHERS="${OTHERS} $( str_quote "$1" )"
                    shift # arg
                ;;
            esac
        fi
    done
    eval "set -- ${OTHERS}"

    CMD=""
    FILES=""

    { # Check command and files
        add_file() {
            if [ ! -e "$1" ]; then
                error_exit "$EXIT_CODE_INVALID_LOG_FILE" "Invalid log file: $1"
            fi
            FILES="${FILES} $( str_quote "$1" )"
        }

        for arg in "$@"; do
            if [ -n "$CMD" ]; then
                add_file "$arg"
                continue
            fi

            case "$arg" in
                list-ip|list-hosts|list-uri|hist-ip|hist-load)
                    CMD="$arg"
                ;;
                *)
                    add_file "$arg"
                ;;
            esac
        done
    }
}
###ARGUMENTS PROCESSING###-


log_list_ip() {
    cut -s -d ' ' -f 1
}

log_list_time() {
    sed -n 's/^.*\[\(.*\)\].*$/\1/p'
}

log_list_uri() {
    sed -n 's/^[^ ]* [^ ]* [^ ]* \[[^][]*\] "[^" ]* \([^" ]*\) [^" ]*".*$/\1/p'
}

normalize_dates() {
    sed 's/[\/\\.: -]/_/g'
}

normalize_date_arg() {
    printf "%s" "$1" | normalize_dates
}

fix_log_dates() {
    # TODO: remove this commented awk
    # awk -F "_" '
    # {
    #     if ($2 == "Jan")
    #         $2 = "01"
    #     else if ($2 == "Feb")
    #         $2 = "02"
    #     else if ($2 == "Mar")
    #         $2 = "03"
    #     else if ($2 == "Apr")
    #         $2 = "04"
    #     else if ($2 == "May")
    #         $2 = "05"
    #     else if ($2 == "Jun")
    #         $2 = "06"
    #     else if ($2 == "Jul")
    #         $2 = "07"
    #     else if ($2 == "Aug")
    #         $2 = "08"
    #     else if ($2 == "Sep")
    #         $2 = "09"
    #     else if ($2 == "Oct")
    #         $2 = "10"
    #     else if ($2 == "Nov")
    #         $2 = "11"
    #     else if ($2 == "Dec")
    #         $2 = "12"
    #     else
    #         $2 = "00"
    # }
    # { print $3 "_" $2 "_" $1 "_" $4 "_" $5 "_" $6 }
    # '

    sed -n \
        -e 's/Jan/01/;s/Feb/02/;s/Mar/03/;s/Apr/04/;s/May/05/;s/Jun/06/;s/Jul/07/;s/Aug/08/;s/Sep/09/;s/Oct/10/;s/Nov/11/;s/Dec/12/' \
        -e 's/^\([0-9][0-9]\)_\([0-9][0-9]\)_\([0-9][0-9][0-9][0-9]\)_\([0-9][0-9]\)_\([0-9][0-9]\)_\([0-9][0-9]\).*$/\3_\2_\1_\4_\5_\6/p'
}

normalize_log_dates() {
    normalize_dates | fix_log_dates
}

normalize_input_date_arg() {
    date="$( normalize_date_arg "$1" )"
    
    yyyy="${date%%_*}" && ! is_unsigned_num "$yyyy" && yyyy="0000"
    date="${date#*_}"
    mm="${date%%_*}" && ! is_unsigned_num "$mm" && mm="00"
    date="${date#*_}"
    dd="${date%%_*}" && ! is_unsigned_num "$dd" && dd="00"
    date="${date#*_}"
    hh="${date%%_*}" && ! is_unsigned_num "$hh" && hh="00"
    date="${date#*_}"
    mn="${date%%_*}" && ! is_unsigned_num "$mn" && mn="00"
    date="${date#*_}"
    ss="${date%%_*}" && ! is_unsigned_num "$ss" && ss="00"
    
    printf "%4s_%2s_%2s_%2s_%2s_%2s" "$yyyy" "$mm" "$dd" "$hh" "$mn" "$ss" | tr ' ' '0'
}

beautify_hour_dates() { # YYYY-MM-DD HH:00
    awk -F "_" '{ print $1 "-" $2 "-" $3 " " $4 ":00" }'
}

get_hostname() {
    if ! host="$( host "$1" )"; then
        return 1
    fi
    host="$( printf "%s" "$host" | tail -n -1 | awk -F "domain name pointer " '{ print $2 }' )"
    #host="${host%.}" # remove tailing dot
    printf "%s" "$host"
}

try_get_hostname() {
    get_hostname "$1" || get_hostname "$1" || get_hostname "$1" || printf "%s" "$1"
}

draw_hist() {
    # Draw histogram
    while read -r val_name_line; do
        if [ -z "$val_name_line" ]; then
            continue
        fi
        
        value="${val_name_line%% *}"
        name="${val_name_line#* }"
        
        printf "%s (%s): " "$name" "$value"
        printf "%${value}s\\n" "" | tr " " "#"
    done
}

file_preprocess() {
    file_extension="$1"
    
    case "$file_extension" in
        gz|*.gz)
            gzip -d
        ;;
        *)
            cat # nothing to do
        ;;
    esac
}

files_read() {
    if [ "$#" -eq 0 ]; then
        cat # read from stdin
    else
        for file in "$@"; do
            file_preprocess "${file##*"."}" < "$file"
        done
    fi
}

files_filter() {
    {
        if [ -n "$F_IP" ]; then
            awk -v ip="$F_IP" -F ' ' '{
                if ($1 == ip) print
            }'
        else
            cat # Nothing to filter
        fi
    } | {
        if [ -n "$F_URI" ]; then
            while read -r line; do
                uri="$( printf "%s" "$line" | log_list_uri )"
                if [ -z "$uri" ] || [ -z "$( printf "%s" "$uri" | grep -- "$F_URI" )" ]; then
                    continue
                fi
                printf "%s\\n" "$line"
            done
        else
            cat # Nothing to filter
        fi
    } | {
        if [ -n "$F_AFTER" ] || [ -n "$F_BEFORE" ]; then
            if [ -n "$F_AFTER" ]; then
                F_NORM_AFTER="$( normalize_input_date_arg "$F_AFTER" )"
            fi
            if [ -n "$F_BEFORE" ]; then
                F_NORM_BEFORE="$( normalize_input_date_arg "$F_BEFORE" )"
            fi

            while read -r line; do
                dateTime="$( printf "%s" "$line" | log_list_time )"
                if [ -z "$dateTime" ] || [ "$dateTime" = "-" ]; then
                    continue
                fi
                dateTime="$( printf "%s" "$dateTime" | normalize_log_dates )"

                
                if [ -n "$F_AFTER" ] && [ "$( compare_strings "$dateTime" "$F_NORM_AFTER" )" -gt -1 ]; then
                    continue
                fi
                if [ -n "$F_BEFORE" ] && [ "$( compare_strings "$dateTime" "$F_NORM_BEFORE" )" -lt 1 ]; then
                    continue
                fi
                printf "%s\\n" "$line"
            done
        else
            cat # Nothing to filter
        fi
    }
}

cmd_list_ip() {
    log_list_ip | sort -u
}

cmd_list_hosts() {
    cmd_list_ip | {
        while read -r line; do
            try_get_hostname "$line"
            printf "\\n"
        done
    } | sort -u
}

cmd_list_uri() {
    log_list_uri | sort -u
}

cmd_hist_ip() {
    log_list_ip | sort | uniq -c | sort -n -r | trim | draw_hist
}

cmd_hist_load() {
    log_list_time | normalize_log_dates | beautify_hour_dates | sort | uniq -c | trim | draw_hist
}

cmd_basic_print() {
    cat # just print out input
}

{ # Process command
    { eval "files_read ${FILES}"; } | files_filter | {
        case "$CMD" in
            list-ip) # výpis seznamu zdrojových IP adres
                cmd_list_ip
            ;;
            list-hosts) # výpis seznamu zdrojových doménových jmen
                cmd_list_hosts
            ;;
            list-uri) # výpis seznamu cílových zdrojů (URI)
                cmd_list_uri
            ;;
            hist-ip) # výpis histogramu četností dotazů podle zdrojových IP adres
                cmd_hist_ip
            ;;
            hist-load) # výpis histogramu zátěže (tj. počtu dotazů ve jednotlivých časových intervalech)
                cmd_hist_load
            ;;
            '') # no command
                cmd_basic_print
            ;;
            *) # unknown command
                error_exit "$EXIT_CODE_INVALID_COMMAND" "Invalid command: $CMD"
            ;;
        esac
    }
}

trap : 0 # cancel exit trap -> exit with 0
